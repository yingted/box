0/7=0 1/7=0 2/7=0 3/7=0 4/7=0 5/7=0 6/7=0 7/7=1 8/7=1 9/7=1 10/7=1 11/7=1 12/7=1 13/7=1 14/7=2 15/7=2 
7/1=7 7/2=3 7/3=2 7/4=1 7/5=1 7/6=1 7/7=1 7/8=0 7/9=0 7/10=0 7/11=0 7/12=0 7/13=0 7/14=0 7/15=0 
 !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~
0123456789

13 8 5 3 2 1 1 
0 1 1 2 3 5 8 13
Hello, World!
This is a length-limited text
0 1 3 6
 !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~
* * * * * * * * * *
* * * * * * * * *
* * * * * * * *
* * * * * * *
* * * * * *
* * * * *
* * * *
* * *
* *
*
Language specification:
This programming language only uses hexadecimal characters (0-9 and a-f). All other characters are comments. The program is made of a series of instructions. Each instruction is a hexadecimal character, followed by a number of hexadecimal characters which are not considered instructions. The address is index: in "xyz", y has address 1 and x has address 0. The program terminates when the address of the instruction moves out of the program. You may assume the program is correct and will never encounter any errors. The program might be more than 255 characters, so be sure to use your language's features to read in long lines.
The language features a stack. Stack addressing starts from the top (top is 0, second from top is 1). All values are 4-bit: 7+12=19 normally, but here it will be 3, since the 5th bit (16) is discarded.
This was overwritten
